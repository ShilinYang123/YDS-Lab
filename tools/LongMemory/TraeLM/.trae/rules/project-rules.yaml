# 项目规则配置文件
# 定义JS003项目特定的开发规范、约束和最佳实践

# 项目基本信息
project_info:
  name: "JS003-Trae长记忆功能实施"
  version: "1.0.0"
  description: "Trae平台长记忆功能实施，包括规则系统和知识图谱记忆"
  repository: "S:\\HQ-OA\\tools\\LongMemory\\TraeLM"
  
# 开发规范
development_standards:
  # 代码规范
  coding_standards:
    - "使用TypeScript进行开发，严格类型检查"
    - "遵循ESLint和Prettier配置"
    - "函数和类必须包含JSDoc注释"
    - "使用语义化命名约定"
    - "避免使用any类型，优先使用具体类型"
  
  # 文件组织
  file_organization:
    - "按功能模块组织代码结构"
    - "每个模块包含index.ts导出文件"
    - "测试文件与源文件同目录或tests目录"
    - "配置文件统一放在config目录"
    - "工具函数放在utils目录"
  
  # 命名约定
  naming_conventions:
    - "文件名使用kebab-case"
    - "类名使用PascalCase"
    - "函数和变量使用camelCase"
    - "常量使用UPPER_SNAKE_CASE"
    - "接口名以I开头(可选)"

# 技术约束
technical_constraints:
  # 依赖管理
  dependencies:
    - "优先使用项目已有依赖"
    - "新增依赖需要评估必要性"
    - "避免引入过重的第三方库"
    - "保持依赖版本的一致性"
  
  # 性能要求
  performance:
    - "知识图谱查询响应时间 < 100ms"
    - "规则验证处理时间 < 50ms"
    - "内存使用控制在合理范围"
    - "支持大规模数据处理"
  
  # 兼容性
  compatibility:
    - "支持Node.js >= 18.0.0"
    - "兼容Trae IDE >= 2.0.0"
    - "跨平台支持(Windows/macOS/Linux)"

# 质量保证
quality_assurance:
  # 测试要求
  testing:
    - "单元测试覆盖率 >= 80%"
    - "集成测试覆盖核心功能"
    - "性能测试验证响应时间"
    - "错误处理测试完整"
  
  # 代码审查
  code_review:
    - "所有代码变更需要审查"
    - "关注代码质量和安全性"
    - "验证测试覆盖率"
    - "检查文档完整性"
  
  # 持续集成
  ci_cd:
    - "自动化测试执行"
    - "代码质量检查"
    - "安全漏洞扫描"
    - "构建产物验证"

# 安全规范
security_standards:
  # 数据安全
  data_security:
    - "敏感数据加密存储"
    - "访问权限严格控制"
    - "数据传输加密"
    - "定期安全审计"
  
  # 代码安全
  code_security:
    - "输入验证和清理"
    - "SQL注入防护"
    - "XSS攻击防护"
    - "依赖漏洞检查"

# 文档规范
documentation_standards:
  # API文档
  api_documentation:
    - "所有公共接口必须有文档"
    - "包含参数说明和示例"
    - "错误码和异常处理说明"
    - "版本变更记录"
  
  # 用户文档
  user_documentation:
    - "安装和配置指南"
    - "使用示例和最佳实践"
    - "故障排除指南"
    - "FAQ常见问题"

# 部署规范
deployment_standards:
  # 环境配置
  environment:
    - "开发、测试、生产环境隔离"
    - "配置文件环境化管理"
    - "敏感信息环境变量存储"
    - "日志级别环境化配置"
  
  # 监控和日志
  monitoring:
    - "关键操作日志记录"
    - "性能指标监控"
    - "错误和异常追踪"
    - "用户行为分析"

# 维护规范
maintenance_standards:
  # 版本管理
  version_control:
    - "使用语义化版本号"
    - "详细的变更日志"
    - "标签和分支管理"
    - "向后兼容性保证"
  
  # 技术债务
  technical_debt:
    - "定期代码重构"
    - "过时依赖更新"
    - "性能优化改进"
    - "文档同步更新"